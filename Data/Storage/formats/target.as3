package citrus.core
{
	public class CitrusObject
	{
		/**
		 * data used internally
		 */
		citrus_internal var data:Object = {ID:0};
		citrus_internal static var last_id:uint = 0;
		
		public static var hideParamWarnings:Boolean = true;
		
		/**
		 * A name to identify easily an objet. You may use duplicate name if you wish.
		 */
		public var name:String;
		
		/**
		 * Set it to true if you want to remove, clean and destroy the object. 
		 */
		public var kill:Boolean = false;
		
		/**
		 * This property prevent the <code>update</code> method to be called by the enter frame, it will save performances. 
		 * Set it to true if you want to execute code in the <code>update</code> method.
		 */
		public var updateCallEnabled:Boolean = false;
		
		/**
		 * Added to the CE's render list via the Scene and the add method.
		 */
		public var type:String = "classicObject";
		
		protected var _initialized:Boolean = false;
		protected var _ce:CitrusEngine;
		protected var _parentScene : IScene;
		
		protected var _params:Object;
		
		/**
		 * The time elasped between two update call.
		 */
		protected var _timeDelta:Number;
		
		public function CitrusObject(params:Object = null)
		{
			this._params = params; // store initial params.
			this._ce = CitrusEngine.getInstance(); // set shortcut to CE.

			citrus_internal::data.ID = citrus_internal::last_id += 1; // set instance ID

			if (!("name" in params))
				this.name = "citrusObjectInstance_" + citrus_internal::data.ID;
		}
		
		public function initialize(poolObjectParams:Object = null):void {
			
			if (poolObjectParams)
				_params = poolObjectParams;
			
			if (_params)
				setParams(this, _params);
			else
				_initialized = true;	
				
		}
		
		public function handleAddedToScene() : void {
		}

		public function handleRemovedFromScene() : void {
		}
		
		/**
		 * Seriously, dont' forget to release your listeners, signals, and physics objects here. Either that or don't ever destroy anything.
		 * Your choice.
		 */		
		public function destroy():void
		{
			citrus_internal::data = null;
			_initialized = false;	
			_params = null;
		}
		
		public function update(timeDelta:Number):void
		{
			_timeDelta = timeDelta;
		}
		
		/**
		 * The initialize method usually calls this.
		 */
		public function setParams(object:Object, params:Object):void
		{
			for (var param:String in params)
			{
				try
				{
					if (params[param] == "true")
						object[param] = true;
					else if (params[param] == "false")
						object[param] = false;
					else
						object[param] = params[param];
				}
				catch (e:Error)
				{
					if (!hideParamWarnings)
						trace("Warning: The property " + param + " does not exist on " + this);
				}
			}
			_initialized = true;
		}
		
		citrus_internal function set parentScene(scene : IScene) : void {
			_parentScene = scene;
		}

		public function get parentScene() : IScene {
			return _parentScene;
		}
		
		public function get initialized() : Boolean {
			return _initialized;
		}
		
		public function get ID():uint
		{
			return citrus_internal::data.ID;
		}
		
		public function toString():String
		{
			use namespace citrus_internal;
			return String(Object(this).constructor) + " ID:" + (data && data["ID"]  ? data.ID : "null") + " name:" + String(name) + " type:" + String(type);
		}
	}
}